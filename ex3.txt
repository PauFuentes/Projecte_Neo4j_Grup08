3.1
CALL gds.graph.create('myGraph3', {
      Habitatge: {
        label: 'Habitatge',
        properties: 'Municipi,Id_Llar,Any_Padro,Carrer,Numero'
      },
      Individu: {
        label: 'Individu',
        properties: 'Id,Year,name,surname,second_surname'
      }
    }, {
      VIU: {
        type: 'VIU',
        orientation: 'NATURAL',
        properties: 'INDIVIDU,Location,Year,HOUSE_ID'
      },
      FAMILIA: {
        type: 'FAMILIA',
        orientation: 'NATURAL',
        properties: 'ID_1,Relacio,Relacio_Harmonitzada,ID_2'
      },
      SAME_AS: {
        type: 'SAME_AS',
        orientation: 'NATURAL',
        properties: 'Id_A,SAME_AS,Id_B'
      }
    })


 CALL gds.wcc.stream('myGraph3')
 YIELD nodeId, componentId   
 WITH componentId, count(*) AS componentSize
 
RETURN size, count(*) AS count
 ORDER BY size ASC

3.2
CALL gds.graph.project('myGraph2', ['Habitatge', 'Individu'],['VIU'])

(Proporció Individus/Habitatge)
CALL gds.wcc.stream('myGraph2')  
YIELD componentId, nodeId
WITH labels(gds.util.asNode(nodeId)) AS Nodes, componentId, count(*) AS Quantitat
RETURN Nodes,  componentId,  Quantitat
ORDER BY componentId

(Màxim nombre d'individus en un mateix habitatge)
CALL gds.wcc.stream('myGraph2')  
YIELD componentId, nodeId
WITH labels(gds.util.asNode(nodeId)) AS Nodes, componentId, count(*) AS Quantitat
RETURN Nodes,  componentId,  Quantitat
ORDER BY Quantitat DESC

(No hi ha cap comunitat amb més d'un habitatge)
CALL gds.wcc.stream('myGraph2')  
YIELD componentId, nodeId
WITH labels(gds.util.asNode(nodeId)) AS Nodes, componentId, count(*) AS Quantitat
WHERE 'Habitatge' IN Nodes AND Quantitat > 1
RETURN Nodes,  componentId,  Quantitat
ORDER BY componentId
3.3


3.4
CALL gds.graph.project('myGraph2', ['Habitatge', 'Individu'],['VIU'])

(Habitatges sense Individus)
CALL gds.wcc.stream('myGraph2')
YIELD componentId, nodeId
WITH collect(DISTINCT labels(gds.util.asNode(nodeId))) AS Tipus_Nodes, componentId, collect(nodeId) AS nodes
WHERE size(Tipus_Nodes) = 1 AND NOT 'Individu' IN Tipus_Nodes[0]
MATCH (n)
WHere id(n) IN nodes
RETURN n.Any_Padro, count(n)

(Individus sense Habitatge)
CALL gds.wcc.stream('myGraph2')
YIELD componentId, nodeId
WITH collect(DISTINCT labels(gds.util.asNode(nodeId))) AS Tipus_Nodes, componentId, collect(nodeId) AS nodes
WHERE size(Tipus_Nodes) = 1 AND NOT 'Individu' IN Tipus_Nodes[0]
MATCH (n)
WHere id(n) IN nodes
RETURN n.Any_Padro, count(n) 
ORDER BY n.Any_Padro ASC
